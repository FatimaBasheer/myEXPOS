alias functionNum R1;
alias currentPID R2;
if(functionNum==2)
then
alias pagenum R3;
alias blocknum R4;
multipush(R1,R2,R3,R4,R5);
R1=3;
R2=currentPID;
call MOD_0;
multipop(R1,R2,R3,R4,R5);
//LOAD OR STORE BIT
[DISK_STATUS_TABLE]=1;
[DISK_STATUS_TABLE+1]=0;
[DISK_STATUS_TABLE+2]=pagenum;
[DISK_STATUS_TABLE+3]=blocknum;
[DISK_STATUS_TABLE+4]=currentPID;
load(pagenum,blocknum);
[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
multipush(R1,R2,R3,R4,R5);
call MOD_5;
multipop(R1,R2,R3,R4,R5);
endif;
if(functionNum==4)
then
multipush(R0,R1,R2,R3,R4,R5,R6,R7);
R1=8;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R0,R1,R2,R3,R4,R5,R6,R7);
read;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_TERMINAL;
multipush(R0,R1,R2,R3,R4,R5,R6,R7);
call MOD_5;
multipop(R0,R1,R2,R3,R4,R5,R6,R7);
alias logicalAddr R3;
alias pagetablebase R4;
alias physicalAddr R5;
physicalAddr=[PTBR+(logicalAddr/512)*2]*512+(logicalAddr%512);
[physicalAddr]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+8];
multipush(R0,R1,R2,R3,R4,R5,R6,R7);
R1=9;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R0,R1,R2,R3,R4,R5,R6,R7);
endif;
if(functionNum==3)
then
multipush(R0,R1,R2,R3,R4,R5,R6,R7);
R1=8;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R0,R1,R2,R3,R4,R5,R6,R7);
print R3;
multipush(R0,R1,R2,R3,R4,R5,R6,R7);
R1=9;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_0;
multipop(R0,R1,R2,R3,R4,R5,R6,R7);
else
return;
endif;
return;
